{"version":3,"sources":["context/todo-context.tsx","components/todo-item/todo-item.tsx","components/todo-add-item/todo-add-item.tsx","components/status-bar/status-bar.tsx","services/todos-db.ts","app.tsx","serviceWorkerRegistration.ts","reportWebVitals.ts","index.tsx"],"names":["TodoContext","React","createContext","idJustAdded","idNextFocus","clearIdJustAdded","clearNextFocus","TodoItem","memo","complete","id","text","onCompleteChange","onDelete","onTextChange","onModeChange","todoContext","useContext","rootRef","useRef","inputRef","tempText","useState","stateText","setStateText","isConfirmingDelete","setIsConfirmingDelete","mode","setMode","updateMode","onCheckboxChange","onDeleteClick","onCancelDelete","onConfirmDelete","saveText","startEditingText","useCallback","current","focus","setSelectionRange","value","length","stopEditingText","useEffect","isFocused","className","classnames","tabIndex","onKeyDown","event","key","document","activeElement","preventDefault","ref","onFocus","onBlur","setTimeout","el","contains","data-testid","aria-label","onClick","type","checked","onChange","onInput","target","stopPropagation","TodoAddItem","onAdd","context","buttonRef","StatusBar","todoStatus","todo","todoOutput","DB_NAME","STORE_NAME","TodosDb","db","confirmIndexedDb","this","close","window","indexedDB","deleteDatabase","Promise","resolve","reject","request","open","onupgradeneeded","onUpgradeNeeded","bind","onblocked","console","log","onerror","onsuccess","result","transaction","objectStore","add","readTodo","then","catch","get","getAll","update","storeUpdate","put","error","delete","createObjectStore","keyPath","autoIncrement","createIndex","unique","due","Error","App","setIdJustAdded","setIdNextFocus","setTodoStatus","focussedTodoId","items","setItems","onTodoComplete","onUpdateItem","onTodoText","prop","newItems","slice","item","findIndex","updateTodo","onTodoDelete","deleteIndex","splice","deleteTodo","onTodoModeChange","readAllTodos","todos","up","down","currentIndex","body","addEventListener","removeEventListener","useMemo","Provider","map","createTodo","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","fetch","headers","response","contentType","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.28919616.chunk.js","sourcesContent":["import React from 'react';\n\nexport interface TodoContextProps {\n  idJustAdded: number;\n  idNextFocus: number;\n  clearIdJustAdded: (id: number) => void;\n  clearNextFocus: (id: number) => void;\n}\n\nexport const TodoContext = React.createContext<TodoContextProps>({\n  idJustAdded: -1,\n  idNextFocus: -1,\n  clearIdJustAdded: () => undefined,\n  clearNextFocus: () => undefined,\n});\n","import React from 'react';\nimport classnames from 'classnames';\nimport { TodoContext } from '../../context/todo-context';\n\nimport './style.css';\n\nexport interface TodoItemProps {\n  complete?: boolean;\n  id: number;\n  onCompleteChange?: (id: number, complete: boolean) => void;\n  onDelete?: (id: number) => void;\n  onTextChange?: (id: number, text: string) => void;\n  onModeChange?: (id: number, mode: TodoMode) => void;\n  text?: string;\n}\n\nexport type TodoMode = 'focus' | 'edit-text' | 'confirm-delete' | 'none';\n\nexport const TodoItem: React.FC<TodoItemProps> = React.memo(({\n  complete = false,\n  id,\n  text = '',\n  onCompleteChange = () => undefined,\n  onDelete = () => undefined,\n  onTextChange = () => undefined,\n  onModeChange = () =>  undefined,\n}) => {\n  const todoContext = React.useContext(TodoContext);\n  const rootRef = React.useRef<HTMLDivElement>(null);\n  const inputRef = React.useRef<HTMLInputElement>(null);\n\n  const tempText = React.useRef(text);\n  const [stateText, setStateText] = React.useState(text);\n  const [isConfirmingDelete, setIsConfirmingDelete] = React.useState(false);\n  const [mode, setMode] = React.useState('none');\n\n  function updateMode(mode: TodoMode) {\n    setMode(mode);\n    onModeChange(id, mode);\n  }\n\n  function onCheckboxChange() {\n    onCompleteChange(id, !complete);\n  }\n\n  function onDeleteClick() {\n    setIsConfirmingDelete(true);\n    updateMode('confirm-delete');\n  }\n\n  function onCancelDelete() {\n    setIsConfirmingDelete(false);\n    updateMode('focus');\n  }\n\n  function onConfirmDelete() {\n    onDelete(id);\n    updateMode('none');\n  }\n\n  function onRootFocus() {\n    updateMode('focus');\n  }\n\n  function onRootBlur(event: React.FocusEvent) {\n    setTimeout(() => {\n      const el = rootRef.current;\n      if (el && el !== document.activeElement && !el.contains(document.activeElement)) {\n        if (isConfirmingDelete) {\n          setIsConfirmingDelete(false);\n        }\n        updateMode('none');\n      }\n    }, 0);\n  }\n\n  function onInputBlur() {\n    saveText();\n  }\n\n  function onInputFocus(event: React.FocusEvent) {\n    // prevent bubbling up to onRootFocus():\n    event.stopPropagation();\n    startEditingText();\n    updateMode('edit-text');\n  }\n\n  function onItemTextChange(event: React.ChangeEvent<HTMLInputElement>) {\n    todoContext.clearIdJustAdded(id);\n    setStateText(event.target.value);\n  }\n\n  function onKeyDown(event: React.KeyboardEvent) {\n    if (isConfirmingDelete) {\n      switch (event.key) {\n        case 'Escape':\n          onCancelDelete();\n          break;\n        case 'Enter':\n        case 'Space':\n          onConfirmDelete();\n          break;\n        default:\n          break;\n      }\n    } else if (isEditingText()) {\n      switch (event.key) {\n        case 'Enter':\n          stopEditingText();\n          saveText();\n          break;\n        case 'Escape':\n          stopEditingText();\n          resetText();\n          break;\n        default:\n          break;\n      }\n    } else {\n      switch (event.key) {\n        case 'Enter':\n        case ' ':\n          onCheckboxChange();\n          break;\n        case 'Backspace':\n        case 'Delete':\n          onDeleteClick();\n          break;\n        case 'i':\n        case 'I':\n          // preventDefault to prevent \"Search for text when you start typing\"\n          // in Firefox:\n          event.preventDefault();\n          startEditingText();\n          break;\n        default:\n          break;\n      }\n    }\n  }\n\n  function saveText() {\n    onTextChange(id, stateText);\n  }\n\n  function resetText() {\n    setStateText(tempText.current);\n  }\n\n  const startEditingText = React.useCallback(() => {\n    if (inputRef.current) {\n      tempText.current = stateText;\n      inputRef.current.focus();\n      inputRef.current.setSelectionRange(0, inputRef.current.value.length, 'forward');\n    }\n  }, [inputRef, stateText]);\n\n  function stopEditingText() {\n    if (rootRef.current) {\n      rootRef.current.focus();\n    }\n  }\n\n  function isEditingText() {\n    return document.activeElement === inputRef.current;\n  }\n\n  React.useEffect(() => {\n    if (todoContext.idJustAdded === id) {\n      startEditingText();\n    }\n  }, [id, todoContext, startEditingText]);\n\n  React.useEffect(() => {\n    if (rootRef.current && todoContext.idNextFocus === id) {\n      rootRef.current.focus();\n      todoContext.clearNextFocus(id);\n    }\n  }, [id, todoContext, rootRef]);\n\n  const isFocused = mode !== 'none';\n\n  return (\n    <div\n      className={classnames(\n        'todo-item',\n        {\n          'todo-item--complete': complete,\n          'todo-item--focus': isFocused,\n        }\n      )}\n      tabIndex={0}\n      onKeyDown={onKeyDown}\n      ref={rootRef}\n      onFocus={onRootFocus}\n      onBlur={onRootBlur}\n    >\n      <div className={classnames('todo-item__content', { 'todo-item__content--focus': isFocused })}>\n        {isConfirmingDelete ? (\n          <>\n            <button\n              tabIndex={-1}\n              data-testid=\"todo-item__delete-cancel\"\n              className=\"todo-item__delete-cancel todo-item__child\"\n              aria-label=\"Cancel delete\"\n              onClick={onCancelDelete}\n            >\n              Cancel\n            </button>\n            <button\n              tabIndex={-1}\n              data-testid=\"todo-item__delete-confirm\"\n              className=\"todo-item__delete-confirm todo-item__child\"\n              aria-label=\"Confirm delete\"\n              onClick={onConfirmDelete}\n            >\n              Yes, delete\n            </button>\n          </>\n        ) : (\n          <>\n            <div className=\"todo-item__complete todo-item__child\">\n              <div className=\"todo-item__complete-checkbox\">\n                <div className={classnames(\n                  'todo-item__complete-checkbox-hit',\n                  {\n                    'todo-item__complete-checkbox-hit--focus': isFocused,\n                    'todo-item__complete-checkbox-hit--complete': complete,\n                  }\n                )}>\n                  <div className={classnames(\n                    'todo-item__complete-checkbox-hit-check',\n                    {\n                      'todo-item__complete-checkbox-hit-check--focus': isFocused && complete,\n                      'todo-item__complete-checkbox-hit-check--complete': complete,\n                    }\n                  )}/>\n                </div>\n              </div>\n              <label className=\"todo-item__complete-label\">\n                  {`Mark ${stateText} as complete`}\n                <input\n                  tabIndex={-1}\n                  type=\"checkbox\"\n                  data-testid=\"todo-item__complete\"\n                  className=\"todo-item__complete-input\"\n                  checked={complete}\n                  onChange={onCheckboxChange}\n                />\n              </label>\n            </div>\n            <label className=\"todo-item__text-label\">\n              <input\n                tabIndex={-1}\n                data-testid=\"todo-item__text\"\n                className={classnames(\n                  'todo-item__text',\n                  'todo-item__child',\n                  {\n                    'todo-item__text--complete': complete,\n                    'todo-item__text--focus': isFocused,\n                  }\n                )}\n                ref={inputRef}\n                value={stateText}\n                onInput={onItemTextChange}\n                onBlur={onInputBlur}\n                onFocus={onInputFocus}\n              />\n            </label>\n            <button\n              tabIndex={-1}\n              data-testid=\"todo-item__delete\"\n              className=\"todo-item__delete todo-item__child\"\n              aria-label=\"Delete\"\n              onClick={onDeleteClick}\n            >\n              <div className={classnames(\n                'todo-item__delete-swipe',\n                'todo-item__delete-swipe-1',\n                {\n                  'todo-item__delete-swipe--complete': complete,\n                  'todo-item__delete-swipe--focus': isFocused,\n                }\n              )} />\n              <div className={classnames(\n                'todo-item__delete-swipe',\n                'todo-item__delete-swipe-2',\n                {\n                  'todo-item__delete-swipe--complete': complete,\n                  'todo-item__delete-swipe--focus': isFocused,\n                }\n              )} />\n            </button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n});\n","import React from 'react';\nimport { TodoContext } from '../../context/todo-context';\n\nimport './style.css';\n\nexport interface TodoAddItemProps {\n  onAdd: () => void;\n  onFocus: () => void;\n  onBlur: () => void;\n}\n\nexport const TodoAddItem: React.FC<TodoAddItemProps> = ({ onAdd, onFocus, onBlur }) => {\n  const context = React.useContext(TodoContext);\n  const buttonRef = React.useRef<HTMLButtonElement>(null);\n\n  React.useEffect(() => {\n    if (context.idNextFocus === 0 && buttonRef.current) {\n      buttonRef.current.focus();\n    }\n  }, [context, buttonRef]);\n\n  return (\n    <div className=\"todo-add-item\">\n      <button\n        className=\"todo-add-item__button\"\n        onClick={onAdd}\n        onFocus={onFocus}\n        onBlur={onBlur}\n        ref={buttonRef}\n      >\n        +\n      </button>\n    </div>\n  )\n};\n","import React from 'react';\nimport { TodoMode } from '../todo-item';\n\nimport './style.css';\n\nexport interface TodoStatus {\n  id: number;\n  mode: TodoMode;\n}\n\nexport interface StatusBarProps {\n  todoStatus: TodoStatus | null;\n}\n\nexport const StatusBar: React.FC<StatusBarProps> = React.memo(({\n  todoStatus\n}) => {\n  const todo = React.useRef<StatusBarProps['todoStatus']>(null);\n\n  if (todoStatus) {\n    const { id, mode } = todoStatus;\n    if (mode === 'none' && todo.current && todo.current.id !== id) {\n      // An existing todo has a mode other than 'none', so do not update\n      // the status for this todo's 'none' mode.\n    } else {\n      todo.current = mode === 'none' ? null : todoStatus;\n    }\n  }\n\n  let todoOutput: React.ReactNode = '';\n  if (todo.current) {\n    switch (todo.current.mode) {\n      case 'focus':\n        todoOutput = (\n          <>\n            Press <strong>enter</strong> to toggle the complete state, <strong>i</strong> to edit text, <strong>delete</strong> to delete this todo.\n          </>\n        );\n        break;\n      case 'edit-text':\n        todoOutput = (\n          <>\n            Press <strong>enter</strong> to finish editing, <strong>esc</strong> to cancel.\n          </>\n        );\n        break;\n      case 'confirm-delete':\n        todoOutput = (\n          <>\n            Press <strong>esc</strong> to cancel or <strong>enter</strong> to confirm.\n          </>\n        );\n        break;\n      default:\n        break;\n    }\n  }\n\n  return (\n    <div className=\"status-bar\">\n      <p className=\"status-bar__text\">{todoOutput}</p>\n    </div>\n  );\n});\n","const DB_NAME = 'todos';\nconst STORE_NAME = 'todos';\n\n/**\n *\n */\nexport class TodosDb {\n  private db?: IDBDatabase;\n\n  constructor() {\n    TodosDb.confirmIndexedDb();\n  }\n\n  public reset() {\n    this.db?.close();\n    window.indexedDB.deleteDatabase(DB_NAME);\n  }\n\n  public open(): Promise<TodosDb> {\n    return new Promise((resolve, reject) => {\n      const request = window.indexedDB.open(DB_NAME, 1);\n      request.onupgradeneeded = this.onUpgradeNeeded.bind(this);\n      request.onblocked = function () {\n        console.log('Please close all other tabs with this site open so the database can be updated. Thank you.');\n      };\n      request.onerror = () => {\n        reject('Todos will not be saved or restored because database failed to open.');\n      };\n      request.onsuccess = () => {\n        this.db = request.result;\n        resolve(this);\n      }\n    });\n  }\n\n  public createTodo(todo: Partial<Todo>): Promise<Todo> {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        const request = this.db.transaction([DB_NAME], 'readwrite')\n          .objectStore(STORE_NAME)\n          .add({ complete: false, text: '', ...todo });\n        request.onsuccess = (event: any) => {\n          this.readTodo(event.target.result)\n            .then(resolve)\n            .catch(console.log);\n        };\n        request.onerror = () => {\n          reject('Todo was not created because a database error occurred.');\n        }\n      } else {\n        reject(`Request to store a todo failed because database does not exist`);\n      }\n    });\n  }\n\n  public readTodo(id: number): Promise<Todo> {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        const request = this.db.transaction([DB_NAME])\n          .objectStore(STORE_NAME)\n          .get(id);\n        request.onsuccess = (event: any) => {\n          if (event.target.result) {\n            resolve(event.target.result as Todo);\n          } else {\n            reject(`No todo with id ${id} was found.`);\n          }\n        };\n        request.onerror = () => {\n          reject(`Todo with id ${id} could not be retrieved because a database error occurred.`);\n        };\n      } else {\n        reject(`Request to read todo ${id} failed because database does not exist`);\n      }\n    });\n  }\n\n  public readAllTodos(): Promise<Todo[]> {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        const request = this.db.transaction([DB_NAME]).objectStore(STORE_NAME).getAll();\n        request.onsuccess = (event: any) => {\n          resolve(event.target.result);\n        };\n        request.onerror = () => {\n          reject(`Todos could not be retrieved because a database error occurred.`);\n        };\n      } else {\n        reject(`Request to read all todos failed because database does not exist.`);\n      }\n    });\n  }\n\n  public updateTodo(id: number, update: Partial<Todo>): Promise<Todo['id']> {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        this.readTodo(id)\n          .then((todo: Todo) => {\n            if (this.db) {\n              const store = this.db.transaction([DB_NAME], 'readwrite').objectStore(STORE_NAME);\n              const storeUpdate = store.put({ ...todo, ...update, id: todo.id });\n              storeUpdate.onsuccess = (event: any) => {\n                resolve(event.target.result);\n              };\n              storeUpdate.onerror = () => {\n                reject(`Todo with id ${id} could not be updated because a database error occurred.`);\n              };\n            }\n          })\n          .catch(error => {\n            reject(error);\n          });\n      } else {\n        reject(`Request to read todo ${id} failed because database does not exist`);\n      }\n    });\n  }\n\n  public deleteTodo(id: number) {\n    return new Promise((resolve, reject) => {\n      if (this.db) {\n        const request = this.db.transaction([DB_NAME], 'readwrite')\n          .objectStore(STORE_NAME)\n          .delete(id);\n        request.onsuccess = () => {\n          resolve(id);\n        };\n        request.onerror = (event: any) => {\n          reject(event.target.result);\n        }\n      } else {\n        reject(`Request to delete todo ${id} failed because database does not exist`);\n      }\n    });\n  }\n\n  // event is `any` because event, target, and result are all possibly null for\n  // IDBVersionChangeEvent!\n  private onUpgradeNeeded(event: any) {\n    this.db = event.target.result;\n    console.log('onUpgradeNeeded');\n\n    // Version 1\n    const objectStore = this.db!.createObjectStore(STORE_NAME, { keyPath: 'id', autoIncrement: true });\n    objectStore.createIndex('id', 'id', { unique: true });\n    objectStore.createIndex('text', 'text', { unique: false });\n    objectStore.createIndex('complete', 'complete', { unique: false });\n    objectStore.createIndex('due', 'due', { unique: false });\n\n    objectStore.add({ text: 'What do you need to do?', complete: false, due: 'Tuesday' });\n  }\n\n  private static confirmIndexedDb() {\n    if (!window.indexedDB) {\n      throw new Error('Todos will not be saved because your browser does not support IndexedDB.');\n    }\n  }\n}\n\nexport interface Todo {\n  id: number;\n  text: string;\n  complete: boolean;\n  due: string;\n}\n","import React from 'react';\n\nimport { TodoContext } from './context/todo-context';\nimport { TodoItem, TodoMode } from './components/todo-item';\nimport { TodoAddItem } from './components/todo-add-item';\nimport { StatusBar } from './components/status-bar';\nimport { TodosDb, Todo } from './services/todos-db';\nimport './app.css';\n\nfunction App() {\n  const db = React.useRef(new TodosDb());\n  const [idJustAdded, setIdJustAdded] = React.useState<number>(-1);\n  const [idNextFocus, setIdNextFocus] = React.useState<number>(-1);\n  const [todoStatus, setTodoStatus] = React.useState<{ id: number, mode: TodoMode } | null>(null);\n  const focussedTodoId = React.useRef(-1);\n  const [items, setItems] = React.useState<Todo[]>([]);\n\n  function onTodoComplete(id: number, complete: boolean) {\n    onUpdateItem(id, 'complete', complete);\n  }\n\n  function onTodoText(id: number, text: string) {\n    onUpdateItem(id, 'text', text);\n  }\n\n  function onUpdateItem(id: number, prop: keyof Todo, value: string | boolean) {\n    const newItems = items.slice(0);\n    const item = newItems[items.findIndex(item => item.id === id)];\n    if (prop === 'complete') {\n      item.complete = value as boolean;\n    } else if (prop === 'text') {\n      item.text = value as string;\n    }\n    setItems(newItems);\n    db.current.updateTodo(item.id, item);\n  }\n\n  function onTodoDelete(id: number) {\n    const newItems = items.slice(0);\n    const deleteIndex = newItems.findIndex(item => item.id === id);\n    if (deleteIndex < newItems.length - 1) {\n      setIdNextFocus(newItems[deleteIndex + 1].id);\n    } else if (deleteIndex > 0) {\n      setIdNextFocus(newItems[deleteIndex - 1].id);\n    }\n    setIdJustAdded(-1);\n    newItems.splice(deleteIndex, 1);\n    setItems(newItems);\n    db.current.deleteTodo(id);\n  }\n\n  function onTodoModeChange(id: number, mode: TodoMode) {\n    if (mode === 'none' && id === focussedTodoId.current) {\n      focussedTodoId.current = -1;\n    } else if (mode !== 'none') {\n      focussedTodoId.current = id;\n    }\n    setTodoStatus({ id, mode });\n  }\n\n  function onAddItem() {\n    db.current.createTodo({ text: 'What needs doing?' })\n      .then((todo: Todo) => {\n        setIdJustAdded(todo.id);\n        setItems([ ...items, todo ]);\n      })\n      .catch(console.log);\n  }\n\n  function onAddFocus() {\n    focussedTodoId.current = 0;\n    if (idNextFocus === 0) {\n      setIdNextFocus(-1);\n    }\n  }\n\n  function onAddBlur() {\n    if (focussedTodoId.current === 0) {\n      focussedTodoId.current = -1;\n    }\n  }\n\n  // function onReset() {\n  //   db.current.reset();\n  //   openDb();\n  // }\n\n  React.useEffect(openDb, []);\n\n  React.useEffect(() => {\n    const onKeyDown = (event: KeyboardEvent) => {\n      const up = event.key === 'ArrowUp';\n      const down = event.key === 'ArrowDown';\n      if (up || down) {\n        event.preventDefault();\n        const currentIndex = items.findIndex(item => item.id === focussedTodoId.current);\n        document.body.focus();\n        if (up) {\n          if (focussedTodoId.current === 0) {\n            setIdNextFocus(items[items.length - 1].id);\n          } else if (currentIndex > 0) {\n            setIdNextFocus(items[currentIndex - 1].id);\n          } else {\n            if (focussedTodoId.current === -1) {\n              focussedTodoId.current = 0;\n            }\n            setIdNextFocus(focussedTodoId.current);\n          }\n        } else if (down) {\n          if (currentIndex < items.length - 1 && currentIndex !== -1) {\n            setIdNextFocus(items[currentIndex + 1].id);\n          } else if (currentIndex === items.length - 1) {\n            setIdNextFocus(0);\n          } else {\n            if (focussedTodoId.current === -1) {\n              focussedTodoId.current = items[0].id;\n            }\n            setIdNextFocus(focussedTodoId.current);\n          }\n        }\n      }\n    };\n    window.addEventListener('keydown', onKeyDown);\n    return () => window.removeEventListener('keydown', onKeyDown);\n  }, [items]);\n\n  const todoContext = React.useMemo(() => ({\n    idJustAdded,\n    idNextFocus,\n    clearIdJustAdded: (id: number) => {\n      if (id === idJustAdded) {\n        setIdJustAdded(-1);\n      }\n    },\n    clearNextFocus: (id: number) => {\n      if (id === idNextFocus) {\n        setIdNextFocus(-1);\n      }\n    },\n  }), [\n    idJustAdded,\n    idNextFocus,\n  ]);\n\n  function openDb() {\n    db.current.open()\n      .then(() => {\n        db.current.readAllTodos()\n          .then(todos => {\n            setIdNextFocus(todos[0] ? todos[0].id : -1);\n            setItems(todos);\n          })\n          .catch(console.log);\n      })\n      .catch(console.log);\n  }\n\n  return (\n    <TodoContext.Provider value={todoContext}>\n      <main className=\"app\">\n        <div className=\"app__content\">\n          {items.map(item => (\n            <TodoItem\n              key={`todo-${item.id}`}\n              id={item.id}\n              complete={item.complete}\n              text={item.text}\n              onCompleteChange={onTodoComplete}\n              onDelete={onTodoDelete}\n              onTextChange={onTodoText}\n              onModeChange={onTodoModeChange}\n            />\n          ))}\n          <TodoAddItem onAdd={onAddItem} onFocus={onAddFocus} onBlur={onAddBlur} />\n          {/* <button onClick={onReset}>Reset DB</button> */}\n        </div>\n        <StatusBar todoStatus={todoStatus} />\n      </main>\n    </TodoContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './app';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}